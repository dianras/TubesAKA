package main

import (
	"fmt"
	"math/rand"
	"sort"
	"time"
)

func generateTransactions(num int) []int {
	rand.Seed(time.Now().UnixNano())
	transactions := make([]int, num)
	for i := range transactions {
		transactions[i] = rand.Intn(1000)
	}
	return transactions
}

func sequentialSearch(transactions []int, target int) (bool, time.Duration) {
	start := time.Now()
	for _, transaction := range transactions {
		if transaction == target {
			return true, time.Since(start)
		}
	}
	return false, time.Since(start)
}

func binarySearch(transactions []int, target int) (bool, time.Duration) {
	start := time.Now()
	left, right := 0, len(transactions)-1
	for left <= right {
		mid := (left + right) / 2
		if transactions[mid] == target {
			return true, time.Since(start)
		} else if transactions[mid] < target {
			left = mid + 1
		} else {
			right = mid - 1
		}
	}
	return false, time.Since(start)
}

func main() {
	numTransactions := 300
	transactions := generateTransactions(numTransactions)
	target := transactions[rand.Intn(numTransactions)]

	found, duration := sequentialSearch(transactions, target)
	fmt.Printf("Sequential Search - Found: %v, Duration: %.9f seconds\n", found, duration.Seconds())

	sort.Ints(transactions)
	found, duration = binarySearch(transactions, target)
	fmt.Printf("Binary Search - Found: %v, Duration: %.9f seconds\n", found, duration.Seconds())
}
